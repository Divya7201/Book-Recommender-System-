# -*- coding: utf-8 -*-
"""Book Reommendation System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zA7EE8er3ycF8JWvdMSv5B8r-wXowsyL
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import pandas as pd

books = pd.read_csv('/content/drive/MyDrive/Book_recommendation_system/Dataset/Books.csv')
users = pd.read_csv('/content/drive/MyDrive/Book_recommendation_system/Dataset/Users.csv')
ratings = pd.read_csv('/content/drive/MyDrive/Book_recommendation_system/Dataset/Ratings.csv')

books.head()

users.head()

ratings.head()

print(books.shape)
print(ratings.shape)
print(users.shape)

books.isnull().sum()

users.isnull().sum()

ratings.isnull().sum()

books.duplicated().sum()

ratings.duplicated().sum()

users.duplicated().sum()

"""## Popularity based recommender system"""

ratings

books

ratings.merge(books,on='ISBN')

ratings.merge(books,on='ISBN').shape
# it is basically inner join, only matched ISBN from both books and ratings table are displayed
# hence rows in ratings are less after merging

ratings_with_name = ratings.merge(books,on='ISBN')
ratings_with_name

num_rating_df=ratings_with_name.groupby('Book-Title').count()['Book-Rating'].reset_index()
num_rating_df.rename(columns={'Book-Rating':'num_ratings'}, inplace=True)
num_rating_df

avg_rating_df = ratings_with_name.groupby('Book-Title')['Book-Rating'].mean().reset_index() # removed the .mean() from groupby and added it after ['Book-Rating']
avg_rating_df.rename(columns={'Book-Rating':'avg_rating'}, inplace = True)
avg_rating_df

popularity_df = num_rating_df.merge(avg_rating_df,on='Book-Title')
popularity_df

popularity_df = popularity_df[popularity_df['num_ratings']>=250].sort_values('avg_rating',ascending=False).head(50)

popularity_df

popularity_df = popularity_df.merge(books,on='Book-Title').drop_duplicates('Book-Title')[['Book-Title','Book-Author','Image-URL-M','num_ratings','avg_rating']]

popularity_df



"""## Collaborative filtering based Recommender System"""

x = ratings_with_name.groupby('User-ID').count()['Book-Rating'] > 200
experienced_users = x[x].index
#boolean indexing
experienced_users

filtered_rating = ratings_with_name[ratings_with_name['User-ID'].isin(experienced_users)]

filtered_rating.groupby('Book-Title').count()['Book-Rating'] >= 50